
properties([
  parameters ([
    choice(choices: ['Deploy', 'Destroy'], description: 'Select action', name: 'action'),
    string(defaultValue: '3', description: 'Specify TAG#', name: 'TAG', trim: true)
    
  ])
])

int imageTag = Integer.parseInt(params.TAG)


def application = """
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mynginx
  labels:
    app: nginx
spec:
  replicas: 1  
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: shamal317mn/mynginx:${imageTag}
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata: 
  labels:
    app: nginx
  name: mynginx
  namespace: default  
spec:  
  ports:
  - nodePort: 30080
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx
  sessionAffinity: None
  type: NodePort
status:
  loadBalancer: {}
"""


node {
  if ( params.action == "Deploy"){
    stage('Git clone') {
      cleanWs()
      git 'https://github.com/shamal112mn/simple-webpage-k8s.git'
      writeFile file: "mynginx.yaml", text: "${application}"
    }

    sshagent(credentials: ['master_jenkins_ssh']){    
      stage('Move  appl'){      
        sh 'scp -o StrictHostKeyChecking=no mynginx.yaml  vagrant@192.168.56.13:mynginx.yaml'
      }
              
      stage("${params.action} application"){ 
        sh 'ssh  -o StrictHostKeyChecking=no vagrant@192.168.56.13  kubectl apply -f mynginx.yaml'
      }      
    } 
  } 
  else if ( params.action == "Destroy"){
    sshagent(credentials: ['master_jenkins_ssh']){ 
      
      stage(" Git skipped") {
        echo "Git clone was skipped"
      }

      stage("Move appl skipped") {
        echo "Movinfg application to remote was skipped"
      }

      stage("${params.action} application"){ 
        sh 'ssh   -o StrictHostKeyChecking=no vagrant@192.168.56.13  kubectl delete -f mynginx.yaml'
        cleanWs()
      }
    }
  }  
}

   





